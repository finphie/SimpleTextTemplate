using System.Collections.Immutable;
using System.Diagnostics;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using SimpleTextTemplate.Generator.Extensions;
using SimpleTextTemplate.Generator.Specs;
using static SimpleTextTemplate.Generator.Specs.TemplateWriterWriteType;

namespace SimpleTextTemplate.Generator;

/// <summary>
/// ソースコードを生成します。
/// </summary>
/// <param name="context">インクリメンタルソースジェネレーターで使用するコンテキスト</param>
/// <param name="infoList">インターセプター情報のリスト</param>
readonly ref struct Emitter(SourceProductionContext context, ImmutableArray<InterceptInfo> infoList) : IDisposable
{
    static readonly string FullName = typeof(TemplateGenerator).FullName;
    static readonly string Version = typeof(TemplateGenerator).Assembly.GetName().Version.ToString();

    readonly SourceCodeWriter _writer = new();

    readonly SourceProductionContext _context = context;
    readonly ImmutableArray<InterceptInfo> _infoList = infoList;

    /// <inheritdoc/>
    public void Dispose()
        => _writer.Dispose();

    /// <summary>
    /// <see cref="TemplateGenerator"/>で使用するソースコードを生成します。
    /// </summary>
    public void Emit()
    {
        _context.CancellationToken.ThrowIfCancellationRequested();

        _writer.WriteLine("// <auto-generated/>");
        _writer.WriteLine("#pragma warning disable");
        _writer.WriteLine();
        _writer.WriteLine("namespace SimpleTextTemplate.Generator");

        using (_writer.WriteBlock())
        {
            _writer.WriteLine($"""[global::System.CodeDom.Compiler.GeneratedCode("{FullName}", "{Version}")]""");
            _writer.WriteLine("file static class Intercept");

            using (_writer.WriteBlock())
            {
                WriteCultures();
                WriteRenderMethods();
            }
        }

        _writer.WriteLine();
        _writer.WriteLine("namespace System.Runtime.CompilerServices");

        using (_writer.WriteBlock())
        {
            _writer.WriteLine($"""[global::System.CodeDom.Compiler.GeneratedCode("{FullName}", "{Version}")]""");
            _writer.WriteLine("[global::System.AttributeUsage(global::System.AttributeTargets.Method, AllowMultiple = true)]");
            _writer.WriteLine("file sealed class InterceptsLocationAttribute(int version, string data) : global::System.Attribute;");
        }

        var sourceText = SourceText.From(_writer.WrittenSpan.ToString(), Encoding.UTF8);
        _context.AddSource("SimpleTextTemplate.Generated.cs", sourceText);
    }

    void WriteCultures()
    {
        var cultures = _infoList.SelectMany(static x => x.WriteInfoList.Select(static x => x.Provider))
            .Distinct()
            .Select(static x => x?.GetName())
            .Where(static x => !string.IsNullOrEmpty(x))
            .ToArray();

        if (cultures.Length == 0)
        {
            return;
        }

        foreach (var culture in cultures)
        {
            _context.CancellationToken.ThrowIfCancellationRequested();
            _writer.WriteLine($"static global::System.Globalization.CultureInfo {culture!.Replace("-", string.Empty)};");
        }

        _writer.WriteLine();
        _writer.WriteLine("[global::System.Runtime.CompilerServices.ModuleInitializer]");
        _writer.WriteLine("public static void Initialize()");

        using (_writer.WriteBlock())
        {
            foreach (var culture in cultures)
            {
                _context.CancellationToken.ThrowIfCancellationRequested();
                _writer.WriteLine($"""{culture!.Replace("-", string.Empty)} = global::System.Globalization.CultureInfo.GetCultureInfo("{culture}", true);""");
            }
        }

        _writer.WriteLine();
    }

    void WriteRenderMethods()
    {
        if (_infoList.Length == 0)
        {
            return;
        }

        for (var i = 0; i < _infoList.Length; i++)
        {
            _context.CancellationToken.ThrowIfCancellationRequested();
            WriteRenderMethod(i);

            if (i < _infoList.Length - 1)
            {
                _writer.WriteLine();
            }
        }
    }

    void WriteRenderMethod(int number)
    {
        var (interceptsLocationInfo, writeInfo, grow, methodSymbol) = _infoList[number]!;

        var parameters = string.Join(", ", methodSymbol.Parameters.Select(static x => x.GetParameterText()));
        _writer.WriteLine($"""[global::System.Runtime.CompilerServices.InterceptsLocation({interceptsLocationInfo.Version}, "{interceptsLocationInfo.Data}")]""");
        _writer.WriteLine($"public static void Render{number}({parameters})");

        using (_writer.WriteBlock())
        {
            for (var writeInfoIndex = 0; writeInfoIndex < writeInfo.Count; writeInfoIndex++)
            {
                _context.CancellationToken.ThrowIfCancellationRequested();

                var (methodType, value, annotation, format, provider) = writeInfo[writeInfoIndex];
                var contextTypeName = methodSymbol.Parameters.ElementAtOrDefault(2)?.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);

                // Grow
                if (grow.TryGetValue(writeInfoIndex, out var growInfo))
                {
                    WriteGrowMethod(growInfo, contextTypeName);
                }

                // Write
                WriteWriteMethod(writeInfo[writeInfoIndex], contextTypeName);
            }
        }
    }

    void WriteGrowMethod(TemplateWriterGrowInfo growInfo, string? contextTypeName)
    {
        if (growInfo.Members.Count == 0)
        {
            _writer.WriteLine($"writer.Grow({growInfo.ConstantCount});");
            return;
        }

        _writer.WriteLine($"writer.Grow({growInfo.ConstantCount}");
        _writer.IncreaseIndent();

        foreach (var member in growInfo.Members)
        {
            var growArguments = GetGrowMethodArguments(member, contextTypeName);
            _writer.WriteLine($"+ {growArguments}");
        }

        _writer.WriteLine(");");
        _writer.DecreaseIndent();

        static string GetGrowMethodArguments(ContextMember member, string? contextTypeName)
        {
            var isStatic = member.Annotation.HasFlag(MethodAnnotation.Static);

            Debug.Assert(
                !(contextTypeName is null && isStatic),
                $"{nameof(contextTypeName)}がnullかつ静的識別子の場合、コンテキストクラス名が必要となります。");

            var variableName = isStatic
                ? $"{contextTypeName}.@{member.Name}.Length"
                : $"global::System.Runtime.CompilerServices.Unsafe.AsRef(in context).@{member.Name}.Length";

            return member.WriteType switch
            {
                WriteConstantLiteral or WriteLiteral => variableName,
                WriteString => $"global::System.Text.Encoding.UTF8.GetMaxByteCount({variableName})",
                WriteEnum or WriteValue or _ => throw new InvalidOperationException("不正なWriteTypeです。")
            };
        }
    }

    void WriteWriteMethod(TemplateWriterWriteInfo writeInfo, string? contextTypeName)
    {
        var (writeType, value, annotation, format, provider) = writeInfo;

        var isDangerous = annotation.HasFlag(MethodAnnotation.Dangerous);
        var methodName = GetWriteMethodName(writeType, isDangerous);

        var isStatic = annotation.HasFlag(MethodAnnotation.Static);
        var methodArguments = GetWriteMethodArguments(writeType, value, isStatic, format, provider, contextTypeName);

        _writer.WriteLine($"writer.{methodName}({methodArguments});");

        static string GetWriteMethodName(TemplateWriterWriteType type, bool isDangerous)
        {
            var result = type switch
            {
                WriteConstantLiteral => "WriteConstantLiteral",
                WriteLiteral => "WriteLiteral",
                WriteString => "WriteString",
                WriteEnum => "WriteEnum",
                WriteValue => "WriteValue",
                _ => throw new InvalidOperationException()
            };

            return isDangerous ? "Dangerous" + result : result;
        }

        static string GetWriteMethodArguments(TemplateWriterWriteType type, string value, bool isStatic, string? format, IFormatProvider? provider, string? contextTypeName)
        {
            Debug.Assert(
                !(contextTypeName is null && isStatic),
                $"{nameof(contextTypeName)}がnullかつ静的識別子の場合、コンテキストクラス名が必要となります。");

            var formatArgument = format is null
                ? "default"
                : format.ToLiteral();

            var providerArgument = GetProviderArgument(provider);

            return (type, isStatic) switch
            {
                (WriteConstantLiteral, _) => value.ToUtf8Literal(),
                (WriteLiteral or WriteString, false) => $"global::System.Runtime.CompilerServices.Unsafe.AsRef(in context).@{value}",
                (WriteLiteral or WriteString, true) => $"{contextTypeName}.@{value}",
                (WriteValue, false) => $"global::System.Runtime.CompilerServices.Unsafe.AsRef(in context).@{value}, {formatArgument}, {providerArgument}",
                (WriteValue, true) => $"{contextTypeName}.@{value}, {formatArgument}, {providerArgument}",
                (WriteEnum, false) => $"global::System.Runtime.CompilerServices.Unsafe.AsRef(in context).@{value}, {formatArgument}",
                (WriteEnum, true) => $"{contextTypeName}.@{value}, {formatArgument}",
                _ => throw new InvalidOperationException()
            };

            static string GetProviderArgument(IFormatProvider? provider)
                => provider is null ? "provider" : provider.ToFullString();
        }
    }
}
