using System.Collections.Immutable;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using SimpleTextTemplate.Generator.Extensions;
using SimpleTextTemplate.Generator.Specs;
using static SimpleTextTemplate.Generator.Specs.TemplateWriterWriteType;

namespace SimpleTextTemplate.Generator;

/// <summary>
/// ソースコードを生成します。
/// </summary>
static class Emitter
{
    static readonly string FullName = typeof(TemplateGenerator).FullName;
    static readonly string Version = typeof(TemplateGenerator).Assembly.GetName().Version.ToString();

    /// <summary>
    /// <see cref="TemplateGenerator"/>で使用するソースコードを生成します。
    /// </summary>
    /// <param name="context">インクリメンタルソースジェネレーターで使用するコンテキスト</param>
    /// <param name="infoList">インターセプター情報のリスト</param>
    [SuppressMessage("Roslynator", "RCS0053:Fix formatting of a list", Justification = "生文字列リテラル")]
    public static void Emit(SourceProductionContext context, ImmutableArray<InterceptInfo> infoList)
    {
        context.CancellationToken.ThrowIfCancellationRequested();

        var builder = new StringBuilder();
        builder.AppendLine($$"""
            // <auto-generated/>
            #pragma warning disable

            namespace SimpleTextTemplate.Generator
            {
                [global::System.CodeDom.Compiler.GeneratedCode("{{FullName}}", "{{Version}}")]
                file static class Intercept
                {
            """);

        var cultures = infoList.SelectMany(static x => x.WriteInfoList.Select(static x => x.Provider))
            .Distinct()
            .Select(static x => x?.GetName())
            .Where(static x => !string.IsNullOrEmpty(x))
            .ToArray();

        foreach (var culture in cultures)
        {
            context.CancellationToken.ThrowIfCancellationRequested();
            builder.AppendLine($"""
                        static global::System.Globalization.CultureInfo {culture!.Replace("-", string.Empty)};
                """);
        }

        if (cultures.Length > 0)
        {
            builder.AppendLine("""

                        [global::System.Runtime.CompilerServices.ModuleInitializer]
                        public static void Initialize()
                        {
                """);

            foreach (var culture in cultures)
            {
                context.CancellationToken.ThrowIfCancellationRequested();
                builder.AppendLine($$"""
                                {{culture!.Replace("-", string.Empty)}} = global::System.Globalization.CultureInfo.GetCultureInfo("{{culture}}", true);               
                    """);
            }

            builder.AppendLine("""
                        }

                """);
        }

        for (var i = 0; i < infoList.Length; i++)
        {
            context.CancellationToken.ThrowIfCancellationRequested();
            var (interceptsLocationInfo, template, methodSymbol) = infoList[i]!;

            if (i != 0)
            {
                builder.AppendLine();
            }

            var parameters = string.Join(", ", methodSymbol.Parameters.Select(static x => x.GetParameterText()));
            builder.AppendLine($$"""
                        [global::System.Runtime.CompilerServices.InterceptsLocation({{interceptsLocationInfo.Version}}, "{{interceptsLocationInfo.Data}}")]
                        public static void Render{{i}}({{parameters}})
                        {
                """);

            foreach (var (methodType, value, format, provider) in template)
            {
                context.CancellationToken.ThrowIfCancellationRequested();

                var contextTypeName = methodSymbol.Parameters.ElementAtOrDefault(2)?.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
                builder.AppendLine($"            writer.{GetWriteMethodName(methodType)}({GetValue(methodType, value, format, provider, contextTypeName)});");
            }

            builder.AppendLine("        }");
        }

        builder.AppendLine($$"""
                }
            }
            
            namespace System.Runtime.CompilerServices
            {
                [global::System.CodeDom.Compiler.GeneratedCode("{{FullName}}", "{{Version}}")]
                [global::System.AttributeUsage(global::System.AttributeTargets.Method, AllowMultiple = true)]
                file sealed class InterceptsLocationAttribute(int version, string data) : global::System.Attribute;
            }
            """);

        context.AddSource("SimpleTextTemplate.Generated.cs", SourceText.From(builder.ToString(), Encoding.UTF8));
    }

    static string GetWriteMethodName(TemplateWriterWriteType type)
    {
        return type switch
        {
            WriteConstantLiteral => "WriteConstantLiteral",
            WriteLiteral or WriteStaticLiteral => "WriteLiteral",
            WriteString or WriteStaticString => "WriteString",
            WriteEnum or WriteStaticEnum => "WriteEnum",
            WriteValue or WriteStaticValue => "WriteValue",
            _ => throw new InvalidOperationException()
        };
    }

    static string GetValue(TemplateWriterWriteType type, string value, string? format, IFormatProvider? provider, string? contextTypeName)
    {
        Debug.Assert(
            !(contextTypeName is null && type is WriteStaticLiteral or WriteStaticString or WriteStaticValue),
            $"{nameof(contextTypeName)}がnullかつ静的識別子の場合、コンテキストクラス名が必要となります。");

        var formatArgument = format is null
            ? "default"
            : format.ToLiteral();

        var providerArgument = GetProviderArgument(provider);

        return type switch
        {
            WriteConstantLiteral => value.ToUtf8Literal(),
            WriteLiteral or WriteString => $"global::System.Runtime.CompilerServices.Unsafe.AsRef(in context).@{value}",
            WriteValue => $"global::System.Runtime.CompilerServices.Unsafe.AsRef(in context).@{value}, {formatArgument}, {providerArgument}",
            WriteEnum => $"global::System.Runtime.CompilerServices.Unsafe.AsRef(in context).@{value}, {formatArgument}",
            WriteStaticLiteral or WriteStaticString => $"{contextTypeName}.@{value}",
            WriteStaticValue => $"{contextTypeName}.@{value}, {formatArgument}, {providerArgument}",
            WriteStaticEnum => $"{contextTypeName}.@{value}, {formatArgument}",
            _ => throw new InvalidOperationException()
        };

        static string GetProviderArgument(IFormatProvider? provider)
            => provider is null ? "provider" : provider.ToFullString();
    }
}
